"use strict";var Background=function(){function n(){i.$background=$("#background")}function t(){$.when(e("https://source.unsplash.com/category/nature/1920x1080")).done(o)}function e(n){return $.Deferred(function(t){var e=new Image;e.onload=function(){t.resolve(e)},e.onerror=function(){t.reject()},e.src=n}).promise()}function o(n){i.$background.append(n).css("opacity",1)}function r(){n(),t()}var i={};return{init:r}}(),Greeting=function(){function n(){r.$greeting=$("#greeting")}function t(){var n=new Date,t=n.getHours();return"Good "+(t<12?"morning":t>=12&&t<17?"afternoon":"evening")+", "+a+"."}function e(){r.$greeting.text(t())}function o(){n(),e()}var r={},i=["handsome","smarty pants","good looking","classy","junior dev","Mr Roboto"],a=function(){return i[Math.floor(Math.random()*i.length)]}();return{init:o}}(),Quote=function(){function n(){i.$quoteFeature=$("#quote"),i.$quoteLink=$(document.createElement("a")),i.$author=$(document.createElement("p"))}function t(){var n={endpoint:"https://quotesondesign.com/wp-json/posts",params:{"filter[orderby]":"rand","filter[posts_per_page]":1,processdate:(new Date).getTime()}};$.getJSON(n.endpoint,n.params).then(o).catch(e)}function e(n){console.log(n)}function o(n){i.$quoteLink.attr("target","_blank").attr("href",n[0].link).html(n[0].content),i.$author.html(n[0].title),i.$quoteFeature.css("background-color","rgba(0, 0, 0, .2)").attr("href",n[0].link).attr("target","_blank").html(i.$quoteLink).append(i.$author)}function r(){n(),t()}var i={};return{init:r}}();$(document).ready(function(){Background.init(),Greeting.init(),Quote.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
